#include <SFML/Graphics.hpp>
#include<chrono>
class character
{
public:
	character(const sf::Vector2f& pos)
		:
		pos(pos)
	{
		texture.loadFromFile("archer.png");
		sprite = sf::Sprite(texture);
		sprite.setTextureRect({ 0,0,196,376 });

	}
	void draw(sf::RenderTarget& rt) const
	{
		
		rt.draw(sprite);

	}
	void setdirection(const sf::Vector2f& dir)
	{
		vel = dir*speed;
	}
	void update(float dt)
	{

		pos += vel*dt;
		sprite.setPosition(pos);
	}

private:
	static constexpr float speed = 100.0f;
	sf::Vector2f pos;
	sf::Vector2f vel = { 0.0f,0.0f };
	sf::Texture texture;
	sf::Sprite sprite;

};

int main()
{
	
	sf::RenderWindow window(sf::VideoMode(800, 600), "SFML window");

	character man({ 100.0f,100.0f });
	

	//time checkpoint
	auto tp = std::chrono::steady_clock::now();


	// Start the game loop
	while (window.isOpen())
	{
		// Process events
		sf::Event event;
		while (window.pollEvent(event))
		{
			// Close window: exit
			if (event.type == sf::Event::Closed)
				window.close();
		}

		//get dt

		float dt;
		{
			 const auto new_tp = std::chrono::steady_clock::now();
			 dt = std::chrono::duration<float>(new_tp - tp).count();
			 tp = new_tp;
		}
		//handling input

		sf::Vector2f dir = { 0.0f,0.0f };
		if (sf::Keyboard::isKeyPressed(sf::Keyboard::W))
		{
			dir.y -= 1.0f;

		}

		if (sf::Keyboard::isKeyPressed(sf::Keyboard::S))
		{
			dir.y += 1.0f;

		}
		man.setdirection(dir);
		//uPdate man
		man.update(dt);
		
		// Clear screen
		window.clear();
		// Draw the sprite
		man.draw(window);
		
		// Update the window
		window.display();
	}
	return EXIT_SUCCESS;
}